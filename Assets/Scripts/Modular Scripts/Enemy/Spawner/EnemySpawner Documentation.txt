To create a script that spawns enemy ships randomly out of camera bounds with an editable spawn frequency, we can follow these steps:

### Steps:
1. **Enemy Spawning Frequency**: The spawn rate will be controlled by a public variable that can be adjusted in the Unity Inspector.
2. **Random Enemy Position**: The enemies will be spawned at random positions outside the camera’s view (off-screen).
3. **Camera Bounds Calculation**: Use the camera's viewport to determine the boundaries where the enemies can spawn. This ensures enemies are spawned off-screen and not within the player's view.
4. **Randomizing the Spawning**: The enemies will be spawned in random locations just outside the visible screen space.

### `EnemySpawner.cs` Script

```csharp
using UnityEngine;

public class EnemySpawner : MonoBehaviour
{
    public GameObject enemyPrefab;     // Enemy prefab to spawn
    public float spawnFrequency = 2f;  // Time between each spawn, editable in the Inspector
    public float spawnDistance = 5f;   // Distance outside the screen where enemies spawn

    private Camera mainCamera;         // Reference to the main camera

    void Start()
    {
        // Reference to the main camera
        mainCamera = Camera.main;

        // Start the spawning coroutine
        StartCoroutine(SpawnEnemies());
    }

    // Coroutine to spawn enemies at regular intervals
    IEnumerator SpawnEnemies()
    {
        while (true)
        {
            SpawnEnemy();
            yield return new WaitForSeconds(spawnFrequency);  // Wait for the specified spawn frequency
        }
    }

    // Method to spawn an enemy at a random position outside the camera bounds
    void SpawnEnemy()
    {
        // Calculate the camera bounds (edges of the screen in world space)
        Vector3 screenMin = mainCamera.ViewportToWorldPoint(new Vector3(0, 0, mainCamera.nearClipPlane)); // Bottom-left corner
        Vector3 screenMax = mainCamera.ViewportToWorldPoint(new Vector3(1, 1, mainCamera.nearClipPlane)); // Top-right corner

        // Randomize spawn location (just outside the screen)
        Vector3 spawnPosition = GetRandomSpawnPosition(screenMin, screenMax, spawnDistance);

        // Instantiate the enemy at the random spawn position
        Instantiate(enemyPrefab, spawnPosition, Quaternion.identity);
    }

    // Method to get a random spawn position outside the screen
    Vector3 GetRandomSpawnPosition(Vector3 screenMin, Vector3 screenMax, float distanceOutside)
    {
        // Choose which side of the screen to spawn from (top, bottom, left, or right)
        int side = Random.Range(0, 4);  // 0 = Top, 1 = Bottom, 2 = Left, 3 = Right
        Vector3 spawnPosition = Vector3.zero;

        switch (side)
        {
            case 0:  // Top
                spawnPosition = new Vector3(
                    Random.Range(screenMin.x, screenMax.x), 
                    screenMax.y + distanceOutside, 0); // Above the top screen edge
                break;
            case 1:  // Bottom
                spawnPosition = new Vector3(
                    Random.Range(screenMin.x, screenMax.x), 
                    screenMin.y - distanceOutside, 0); // Below the bottom screen edge
                break;
            case 2:  // Left
                spawnPosition = new Vector3(
                    screenMin.x - distanceOutside, 
                    Random.Range(screenMin.y, screenMax.y), 0); // To the left of the screen edge
                break;
            case 3:  // Right
                spawnPosition = new Vector3(
                    screenMax.x + distanceOutside, 
                    Random.Range(screenMin.y, screenMax.y), 0); // To the right of the screen edge
                break;
        }

        return spawnPosition;
    }
}
```

### Explanation:

#### 1. **Spawn Frequency**:
- **`spawnFrequency`**: This public variable determines how often enemies spawn. You can adjust it from the Unity Editor to increase or decrease spawn rate.

#### 2. **Camera Boundaries**:
- **`screenMin`** and **`screenMax`**: We use `ViewportToWorldPoint` to calculate the world coordinates of the camera’s viewport (bottom-left and top-right corners). This gives us the world-space bounds of the camera.

#### 3. **Spawn Positions**:
- **`GetRandomSpawnPosition`**: This method calculates a random spawn position outside the camera view. It chooses one of the four screen sides (top, bottom, left, right) and spawns an enemy slightly beyond the screen limits using **`spawnDistance`**.
  
#### 4. **Randomization**:
- The spawn side is chosen randomly, and the exact spawn position on that side is also randomized within the appropriate range.

#### 5. **Spawning**:
- **`StartCoroutine(SpawnEnemies())`**: The script starts a coroutine that continuously spawns enemies at a fixed interval based on the **`spawnFrequency`**.

### Customizable Variables:
1. **`spawnFrequency`**: Controls how often enemies spawn (in seconds). You can set this in the Unity Editor to control the difficulty.
2. **`spawnDistance`**: The distance outside the screen from which enemies spawn. This prevents them from appearing on-screen immediately.

### Setting Up in Unity:
1. **Enemy Prefab**:
   - Create an enemy GameObject and prefab in your Unity project.
   - Assign the enemy prefab to the **`enemyPrefab`** field in the `EnemySpawner` script.

2. **Attach the Script**:
   - Attach the `EnemySpawner` script to an empty GameObject (e.g., called "EnemySpawner") in your scene.

3. **Adjustable Parameters**:
   - In the Unity Inspector, you can adjust `spawnFrequency` and `spawnDistance` to control how often and how far outside the screen enemies spawn.

### Example of Use:
- With a **`spawnFrequency`** of 2 seconds and **`spawnDistance`** of 5 units, the game will spawn an enemy every 2 seconds, at random positions slightly off-screen.
- This ensures the enemies always approach the player from off-screen and appear in a natural, randomized way.

This approach keeps things modular, allowing easy customization of spawn behavior, frequency, and spawn positions to fit your game.