To create a **modular turret weapon system** where players can switch between multiple weapon slots on their ship using bindable keys, and have the turrets go into an AI-controlled mode when not manually selected, we can break the system down into several components.

### Key Components:
1. **Weapon Slots and Bindable Keys**: The ship will have multiple weapon slots, and each weapon can be selected via specific keys (`1, 2, 3, 4`, etc.).
2. **Modular Weapons**: Weapons are modular, meaning they can be added or removed from the ship's weapon slots. 
3. **Manual Control & AI Turret Mode**: When a weapon is selected, it’s controlled manually by the player. When it’s not selected, it automatically scans for enemies and fires at them if they are in range and within its firing arc.

### Step-by-Step Breakdown:

1. **Weapon Slot System**:
   - We'll set up weapon slots on the player's ship, where each slot can hold a weapon.
   - Each slot is assigned to a specific key (like `1`, `2`, `3`, etc.).

2. **AI Turret Mode**:
   - When the player isn’t manually controlling a weapon, the turret goes into AI mode.
   - The AI turret scans for enemies within a specified arc and fires automatically.

3. **Weapon Selection**:
   - The player can switch between weapon slots using bindable keys. When a weapon is selected, it becomes player-controlled.

### Script Structure:

1. **Weapon Slot Management**: Manages the slots and the currently selected weapon.
2. **Turret Weapons**: Handles shooting, scanning for enemies, and switching between player control and AI mode.
3. **Enemy Detection**: Handles how the turret detects enemies in a specific arc.
4. **Weapon Switching**: Handles switching between weapons using keys.

---

### 1. **WeaponSlotManager.cs** - Managing Slots and Active Weapons

This script manages the weapon slots and allows the player to switch between them using keys (1, 2, 3, etc.).

```csharp
using UnityEngine;

public class WeaponSlotManager : MonoBehaviour
{
    public Weapon[] weaponSlots;  // Array of all weapon slots on the ship
    private int activeWeaponIndex = -1;  // The index of the currently selected weapon (-1 means none)

    void Update()
    {
        // Handle weapon switching via keys 1, 2, 3, etc.
        for (int i = 0; i < weaponSlots.Length; i++)
        {
            if (Input.GetKeyDown(KeyCode.Alpha1 + i))
            {
                SelectWeapon(i);
            }
        }
    }

    // Select a weapon by index
    public void SelectWeapon(int index)
    {
        if (index >= 0 && index < weaponSlots.Length)
        {
            // Deselect current weapon
            if (activeWeaponIndex != -1)
            {
                weaponSlots[activeWeaponIndex].DeactivatePlayerControl();
            }

            // Select the new weapon
            activeWeaponIndex = index;
            weaponSlots[activeWeaponIndex].ActivatePlayerControl();
            Debug.Log("Weapon " + (index + 1) + " selected");
        }
    }
}
```

### 2. **Weapon.cs** - Handling Individual Weapons (Player-Controlled or AI)

This script is attached to each individual weapon, handling both player control and AI turret mode.

```csharp
using UnityEngine;

public class Weapon : MonoBehaviour
{
    public Transform firePoint;        // Where the weapon fires from
    public GameObject projectilePrefab;  // The projectile to shoot
    public float fireRate = 1f;         // Time between shots
    public float detectionRange = 10f;  // How far the turret can detect enemies
    public float detectionAngle = 90f;  // The turret's firing arc (in degrees)

    private float nextFireTime = 0f;    // Time when the weapon can fire again
    private bool isPlayerControlled = false;  // Is the weapon under player control?

    private Transform target;           // Current target (if in AI mode)

    void Update()
    {
        if (isPlayerControlled)
        {
            // Handle player-controlled shooting
            if (Input.GetMouseButton(0) && Time.time >= nextFireTime)
            {
                Shoot();
            }
        }
        else
        {
            // AI Turret mode: scan for enemies and shoot
            if (target == null || !IsTargetInRangeAndArc(target))
            {
                target = ScanForEnemies();
            }

            if (target != null && Time.time >= nextFireTime)
            {
                ShootAtTarget(target);
            }
        }
    }

    // Activate manual control
    public void ActivatePlayerControl()
    {
        isPlayerControlled = true;
    }

    // Deactivate manual control and return to AI mode
    public void DeactivatePlayerControl()
    {
        isPlayerControlled = false;
    }

    // Shoot the weapon (player-controlled)
    private void Shoot()
    {
        Instantiate(projectilePrefab, firePoint.position, firePoint.rotation);
        nextFireTime = Time.time + 1f / fireRate;
        Debug.Log("Player shooting from weapon " + name);
    }

    // Shoot at a specific target (AI-controlled)
    private void ShootAtTarget(Transform target)
    {
        firePoint.LookAt(target);  // Aim at the target
        Instantiate(projectilePrefab, firePoint.position, firePoint.rotation);
        nextFireTime = Time.time + 1f / fireRate;
        Debug.Log("AI shooting at " + target.name);
    }

    // Scan for enemies in range and within the arc
    private Transform ScanForEnemies()
    {
        Collider2D[] hits = Physics2D.OverlapCircleAll(transform.position, detectionRange);

        foreach (Collider2D hit in hits)
        {
            if (hit.CompareTag("Enemy"))
            {
                if (IsTargetInRangeAndArc(hit.transform))
                {
                    return hit.transform;
                }
            }
        }

        return null;  // No enemy found in range
    }

    // Check if the target is within range and within the detection arc
    private bool IsTargetInRangeAndArc(Transform target)
    {
        Vector2 directionToTarget = (target.position - transform.position).normalized;
        float distanceToTarget = Vector2.Distance(transform.position, target.position);

        if (distanceToTarget > detectionRange)
            return false;

        float angleToTarget = Vector2.Angle(transform.up, directionToTarget);
        return angleToTarget <= detectionAngle / 2f;
    }
}
```

### 3. **Enemy.cs** (Simplified Enemy for Testing)

This is just a simplified script for the enemy so that the turret can detect and shoot at it.

```csharp
using UnityEngine;

public class Enemy : MonoBehaviour
{
    public float health = 50f;

    public void TakeDamage(float damage)
    {
        health -= damage;
        if (health <= 0f)
        {
            Destroy(gameObject);
        }
    }
}
```

### Explanation:

#### **WeaponSlotManager.cs**:
- This manages the **active weapon slots** and listens for the player's input (keys `1, 2, 3, etc.`). When a key is pressed, the corresponding weapon is selected, and the previous weapon is deactivated.
- It uses **`ActivatePlayerControl()`** and **`DeactivatePlayerControl()`** to toggle between player control and AI mode.

#### **Weapon.cs**:
- This script handles the **turret behavior**, switching between **manual control** (when the player selects the weapon) and **AI mode** (when the weapon is not selected).
- In **AI mode**, the turret scans for enemies in a defined range and arc using **`ScanForEnemies()`** and **`IsTargetInRangeAndArc()`**.
- When a target is detected, the turret shoots at it using **`ShootAtTarget()`**.

#### **Player Control**:
- When the weapon is selected via the weapon slot manager, the player can manually aim and shoot using the mouse.
- **Player shooting** is handled by clicking the mouse button, and the weapon fires a projectile from its **firePoint**.

#### **AI Control**:
- When a weapon is not under player control, it switches to **AI mode**, scanning for enemies within a specific range and angle and firing automatically when it detects one.

### **Customizing Weapons**:
- **Fire Rate**: You can control how fast each weapon fires by adjusting the `fireRate`.
- **Detection Range and Arc**: You can adjust the AI turret's detection behavior by modifying the `detectionRange` (how far it can see) and `detectionAngle` (the arc it scans).
- **Projectile**: The **projectilePrefab** can be set to any prefab you want, so you can have different weapons shooting different types of projectiles.

### Future Integration:
- You can link this system with other parts of your game (e.g., UI, ship customization, saving/loading) by accessing the public variables and methods of these scripts.
