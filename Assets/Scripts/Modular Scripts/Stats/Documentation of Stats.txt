To create a **ship stats** script with health, shield, and damage multiplier functionality, you can encapsulate these mechanics in a **`ShipStats`** script. This script will manage health, shield, and damage multiplier logic, including shield regeneration after a cooldown.

### Requirements:
1. **Health**: The ship’s health does not regenerate and is reduced when taking damage.
2. **Shield**: The shield absorbs damage first, regenerates after a delay when the ship hasn't taken damage for a while.
3. **Damage Multiplier**: Multiplies the outgoing damage from the ship’s weapons.

### Key Mechanics:
- The shield regenerates over time if the ship hasn't been damaged for a set cooldown period.
- The damage multiplier affects the projectile's damage.

### `ShipStats.cs` Script

```csharp
using UnityEngine;
using System.Collections;

public class ShipStats : MonoBehaviour
{
    // Ship's Stats
    public float maxHealth = 100f;      // Maximum health
    public float currentHealth;         // Current health
    public float maxShield = 50f;       // Maximum shield
    public float currentShield;         // Current shield
    public float shieldRegenRate = 5f;  // Shield regeneration per second
    public float shieldRegenCooldown = 3f; // Time before shield starts regenerating after damage
    public float damageMultiplier = 1.5f;  // Multiplier for outgoing damage

    private float timeSinceLastDamage;  // Time since the last time the ship took damage

    void Start()
    {
        // Initialize health and shield to their maximum values
        currentHealth = maxHealth;
        currentShield = maxShield;
    }

    void Update()
    {
        // Check if the shield can regenerate
        if (Time.time - timeSinceLastDamage >= shieldRegenCooldown)
        {
            RegenerateShield();
        }
    }

    // Method to handle taking damage
    public void TakeDamage(float damage)
    {
        // Reset the time since last damage
        timeSinceLastDamage = Time.time;

        if (currentShield > 0)
        {
            // If shield exists, absorb damage with shield first
            float remainingDamage = damage - currentShield;
            currentShield -= damage;

            if (currentShield < 0)
            {
                currentShield = 0;
            }

            // If damage exceeds the shield, apply remaining damage to health
            if (remainingDamage > 0)
            {
                currentHealth -= remainingDamage;
            }
        }
        else
        {
            // If no shield, apply damage directly to health
            currentHealth -= damage;
        }

        // If health goes below zero, trigger death (you can implement death handling here)
        if (currentHealth <= 0)
        {
            Die();
        }
    }

    // Method to regenerate shield over time
    private void RegenerateShield()
    {
        if (currentShield < maxShield)
        {
            currentShield += shieldRegenRate * Time.deltaTime;
            if (currentShield > maxShield)
            {
                currentShield = maxShield;  // Ensure shield doesn't exceed max
            }
        }
    }

    // Method to handle death (this can be customized for your game)
    private void Die()
    {
        Debug.Log("Ship has been destroyed!");
        // Destroy the ship, trigger explosion, or game over logic
        Destroy(gameObject);  // Example: destroy the GameObject
    }

    // Method to apply damage multiplier to outgoing projectiles
    public float ApplyDamageMultiplier(float baseDamage)
    {
        return baseDamage * damageMultiplier;
    }
}
```

### Key Mechanics:
1. **Health**:
   - `maxHealth` and `currentHealth` manage the ship’s health.
   - Health decreases when the ship takes damage and does not regenerate.
   
2. **Shield**:
   - `maxShield` and `currentShield` manage the shield, which regenerates when the ship hasn't taken damage for a set time.
   - The `shieldRegenRate` determines how fast the shield regenerates.
   - `shieldRegenCooldown` is the time the ship must wait before the shield begins to regenerate after being damaged.

3. **Damage Multiplier**:
   - `damageMultiplier` multiplies the outgoing damage. You can apply this multiplier when the ship's weapons deal damage (as shown in the `ApplyDamageMultiplier` method).
   - This method is intended to be used in the **Weapon** script to adjust the damage of the ship’s projectiles.

4. **Regenerating the Shield**:
   - The shield regenerates only if the ship has not taken damage for the cooldown period (`shieldRegenCooldown`).
   - The regeneration happens incrementally, based on the `shieldRegenRate`.

### Integrating with Weapons:
To apply the **damage multiplier** when a ship fires its weapon, you can modify the **WeaponHandler** to adjust projectile damage based on the `ShipStats` of the ship firing the projectile.

### Example Weapon Integration (Modify `WeaponHandler`):
In your **WeaponHandler** script, when creating a projectile, you can apply the damage multiplier as follows:

```csharp
public class WeaponHandler : MonoBehaviour
{
    public GameObject projectilePrefab;
    public Transform firePoint;
    public float projectileSpeed = 10f;
    public float shootingInterval = 1f;
    private float timeSinceLastShot = 0f;

    private ShipStats shipStats; // Reference to ShipStats

    void Start()
    {
        // Get the ShipStats component
        shipStats = GetComponent<ShipStats>();
    }

    void Update()
    {
        timeSinceLastShot += Time.deltaTime;
    }

    public void Shoot()
    {
        if (timeSinceLastShot >= shootingInterval && projectilePrefab != null && firePoint != null)
        {
            // Instantiate the projectile
            GameObject projectile = Instantiate(projectilePrefab, firePoint.position, firePoint.rotation);

            // Apply damage multiplier to the projectile's damage
            Projectile projectileScript = projectile.GetComponent<Projectile>();
            if (projectileScript != null && shipStats != null)
            {
                projectileScript.damage = shipStats.ApplyDamageMultiplier(projectileScript.baseDamage);
            }

            // Set the velocity of the projectile
            Rigidbody2D projectileRb = projectile.GetComponent<Rigidbody2D>();
            projectileRb.velocity = firePoint.up * projectileSpeed;

            timeSinceLastShot = 0f; // Reset shooting timer
        }
    }
}
```

### `Projectile.cs` Example:

```csharp
public class Projectile : MonoBehaviour
{
    public float baseDamage = 10f;  // Base damage of the projectile
    public float damage;            // Final damage (after multiplier)

    // Example method when projectile hits something
    void OnTriggerEnter2D(Collider2D collision)
    {
        ShipStats targetStats = collision.GetComponent<ShipStats>();
        if (targetStats != null)
        {
            // Apply damage to the target
            targetStats.TakeDamage(damage);
        }

        // Destroy the projectile after impact
        Destroy(gameObject);
    }
}
```

### Summary:
- The **`ShipStats`** script manages health, shields (with regeneration), and the damage multiplier.
- Shields regenerate after a cooldown period, and health does not regenerate.
- The **damage multiplier** can be applied to outgoing projectiles, modifying their damage output.
- The **WeaponHandler** script can be updated to apply the damage multiplier when shooting projectiles.
