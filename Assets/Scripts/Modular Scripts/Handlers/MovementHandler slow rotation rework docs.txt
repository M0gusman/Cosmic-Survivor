Yes, you can adjust the **rotation speed** of the ship to make it follow the mouse more slowly. Instead of instantly rotating towards the mouse cursor, we can smoothly interpolate the rotation over time, which will give you a more controlled, slower rotation effect.

This can be done by using **`Mathf.LerpAngle`** or **`Quaternion.RotateTowards`** to gradually rotate the ship towards the mouse position based on a set rotation speed.

### Steps:
1. **Add a public variable** for the rotation speed to control how fast the ship rotates.
2. **Interpolate the rotation** so that the ship gradually turns towards the mouse cursor.

Here’s an updated version of the movement script to include **smooth rotation**:

### Updated `MovementHandler` with Smooth Rotation

```csharp
using UnityEngine;

public class MovementHandler : MonoBehaviour
{
    // Movement variables
    public float thrustForce = 10f;  // Controls the force applied when moving
    public float maxSpeed = 5f;      // Maximum speed for the object
    public float drag = 0.9f;        // Controls how fast the object slows down

    // Rotation variables
    public float rotationSpeed = 180f;  // Rotation speed in degrees per second

    private Rigidbody2D rb;

    void Start()
    {
        // Get the Rigidbody2D component
        rb = GetComponent<Rigidbody2D>();
        
        // Set linear drag for the "floaty" effect
        rb.drag = drag;
    }

    // Call this method to move the object in a direction
    public void Move(Vector2 direction)
    {
        if (direction != Vector2.zero)
        {
            // Add force based on the input direction
            rb.AddForce(direction * thrustForce);

            // Limit the velocity to the maximum speed
            if (rb.velocity.magnitude > maxSpeed)
            {
                rb.velocity = rb.velocity.normalized * maxSpeed;
            }
        }
    }

    // Call this method to rotate the object smoothly towards the target position
    public void RotateTowards(Vector2 targetPosition)
    {
        // Get the direction to the target (mouse position)
        Vector2 direction = (targetPosition - (Vector2)transform.position).normalized;

        // Calculate the desired angle (in degrees)
        float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg - 90f;

        // Get the current rotation of the ship
        float currentAngle = rb.rotation;

        // Smoothly interpolate the rotation angle towards the target angle
        float newAngle = Mathf.LerpAngle(currentAngle, targetAngle, rotationSpeed * Time.deltaTime / 360f);

        // Apply the new rotation to the Rigidbody2D
        rb.rotation = newAngle;
    }
}
```

### Key Changes:

1. **Rotation Speed**:
   - **`public float rotationSpeed = 180f;`**: This is the rotation speed in degrees per second. You can adjust this value to control how quickly the ship rotates towards the mouse cursor.
   
2. **Smooth Rotation using `Mathf.LerpAngle`**:
   - **`Mathf.LerpAngle(currentAngle, targetAngle, rotationSpeed * Time.deltaTime / 360f)`**: This smoothly interpolates the current rotation towards the target rotation. The `Time.deltaTime` ensures it’s frame-rate independent.
   - You can adjust the `rotationSpeed` in the Unity Inspector to make the rotation faster or slower.

3. **Explanation**:
   - `targetAngle`: This is the angle the ship needs to face to point towards the mouse cursor (calculated with `Atan2`).
   - `Mathf.LerpAngle`: Smoothly interpolates between the current angle and the target angle.
   - **Note**: The division by `360f` in the interpolation is used to make sure the rotation is gradual and time-based rather than instant.

### Testing in Unity:
- In the **Unity Editor**, you can now adjust the **`rotationSpeed`** variable directly from the Inspector.
  - A higher value (e.g., 360) will make the ship rotate faster.
  - A lower value (e.g., 60) will make the ship rotate much more slowly, which will create a more “floaty” or deliberate movement.

### Optional Alternative: Using `Quaternion.RotateTowards`

Alternatively, you could use **`Quaternion.RotateTowards`** for smoother rotation in 3D or 2D environments. Here’s how to implement it:

```csharp
public void RotateTowards(Vector2 targetPosition)
{
    // Get the direction to the target (mouse position)
    Vector2 direction = (targetPosition - (Vector2)transform.position).normalized;

    // Calculate the desired angle (in degrees)
    float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg - 90f;

    // Get the current rotation as a Quaternion
    Quaternion currentRotation = Quaternion.Euler(0, 0, rb.rotation);

    // Get the target rotation as a Quaternion
    Quaternion targetRotation = Quaternion.Euler(0, 0, targetAngle);

    // Smoothly rotate towards the target rotation using RotateTowards
    Quaternion newRotation = Quaternion.RotateTowards(currentRotation, targetRotation, rotationSpeed * Time.deltaTime);

    // Apply the new rotation to the Rigidbody2D
    rb.rotation = newRotation.eulerAngles.z;
}
```

### Summary:
- With **`rotationSpeed`**, you now have control over how fast the ship rotates towards the mouse.
- Using **`Mathf.LerpAngle`** or **`Quaternion.RotateTowards`**, the ship will smoothly rotate instead of snapping instantly towards the mouse, making the movement feel more realistic, especially in a space environment.
