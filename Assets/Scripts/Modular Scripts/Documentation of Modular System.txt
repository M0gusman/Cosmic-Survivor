To achieve this modular setup with separate scripts for movement, weapons, and control (for both the player and the enemy), we will break down the responsibilities into several components:

### Script Breakdown:
1. **Movement Script (`MovementHandler`)**: Manages physics-based movement (using forces).
2. **Weapon Script (`WeaponHandler`)**: Manages shooting logic and projectile handling.
3. **Player Control**:
   - **Player Movement Control (`PlayerMovement`)**: Handles user input for movement.
   - **Player Weapon Control (`PlayerWeapon`)**: Handles user input for shooting.
4. **Enemy Control**:
   - **Enemy Movement AI (`EnemyMovementAI`)**: Manages automatic movement towards the player.
   - **Enemy Weapon AI (`EnemyWeaponAI`)**: Manages shooting logic for the enemy.

### 1. **Movement Handler Script (`MovementHandler.cs`)**
This script will handle the actual movement logic (applying force and limiting speed). Both player and enemy will call this to move the GameObject.

```csharp
using UnityEngine;

public class MovementHandler : MonoBehaviour
{
    // Movement variables
    public float thrustForce = 10f;  // Controls the force applied when moving
    public float maxSpeed = 5f;      // Maximum speed for the object
    public float drag = 0.9f;        // Controls how fast the object slows down

    private Rigidbody2D rb;

    void Start()
    {
        // Get the Rigidbody2D component
        rb = GetComponent<Rigidbody2D>();
        
        // Set linear drag for the "floaty" effect
        rb.drag = drag;
    }

    // Call this method to move the object in a direction
    public void Move(Vector2 direction)
    {
        if (direction != Vector2.zero)
        {
            // Add force based on the input direction
            rb.AddForce(direction * thrustForce);

            // Limit the velocity to the maximum speed
            if (rb.velocity.magnitude > maxSpeed)
            {
                rb.velocity = rb.velocity.normalized * maxSpeed;
            }
        }
    }

    // Call this method to rotate the object to a specific angle
    public void RotateTowards(Vector2 targetPosition)
    {
        Vector2 direction = (targetPosition - (Vector2)transform.position).normalized;
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg - 90f;
        rb.rotation = angle;
    }
}
```

### 2. **Weapon Handler Script (`WeaponHandler.cs`)**
This script manages shooting projectiles, whether it is controlled by the player or an enemy AI.

```csharp
using UnityEngine;

public class WeaponHandler : MonoBehaviour
{
    public GameObject projectilePrefab; // Prefab for the projectile
    public Transform firePoint;         // The point from where the projectile will be fired
    public float projectileSpeed = 10f; // Speed of the projectile
    public float shootingInterval = 1f; // Time between shots

    private float timeSinceLastShot = 0f;

    void Update()
    {
        timeSinceLastShot += Time.deltaTime;
    }

    // Call this method to fire a projectile
    public void Shoot()
    {
        if (timeSinceLastShot >= shootingInterval && projectilePrefab != null && firePoint != null)
        {
            // Instantiate the projectile
            GameObject projectile = Instantiate(projectilePrefab, firePoint.position, firePoint.rotation);

            // Get the Rigidbody2D of the projectile and apply velocity
            Rigidbody2D projectileRb = projectile.GetComponent<Rigidbody2D>();
            projectileRb.velocity = firePoint.up * projectileSpeed;

            timeSinceLastShot = 0f; // Reset the timer after shooting
        }
    }
}
```

### 3. **Player Movement Control Script (`PlayerMovement.cs`)**
This script listens to player input and uses the `MovementHandler` to move the player character.

```csharp
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    private MovementHandler movementHandler;

    void Start()
    {
        // Get the MovementHandler component attached to the player
        movementHandler = GetComponent<MovementHandler>();
    }

    void Update()
    {
        // Get the input for movement
        Vector2 movementInput = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical")).normalized;

        // Move the player based on the input
        movementHandler.Move(movementInput);

        // Make the player rotate towards the mouse
        Vector3 mousePosition = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        movementHandler.RotateTowards(mousePosition);
    }
}
```

### 4. **Player Weapon Control Script (`PlayerWeapon.cs`)**
This script listens to player input (mouse click or button press) and uses the `WeaponHandler` to shoot projectiles.

```csharp
using UnityEngine;

public class PlayerWeapon : MonoBehaviour
{
    private WeaponHandler weaponHandler;

    void Start()
    {
        // Get the WeaponHandler component attached to the player
        weaponHandler = GetComponent<WeaponHandler>();
    }

    void Update()
    {
        // Shoot when the left mouse button is pressed
        if (Input.GetMouseButton(0))
        {
            weaponHandler.Shoot();
        }
    }
}
```

### 5. **Enemy Movement AI Script (`EnemyMovementAI.cs`)**
This script automatically moves the enemy towards the player and uses the `MovementHandler` to handle the actual movement.

```csharp
using UnityEngine;

public class EnemyMovementAI : MonoBehaviour
{
    public Transform player;  // The player the enemy will move towards

    private MovementHandler movementHandler;

    void Start()
    {
        // Get the MovementHandler component attached to the enemy
        movementHandler = GetComponent<MovementHandler>();
        
        // Find the player if not manually set
        if (player == null)
        {
            player = GameObject.FindGameObjectWithTag("Player").transform;
        }
    }

    void Update()
    {
        if (player == null) return;

        // Move towards the player
        Vector2 directionToPlayer = (player.position - transform.position).normalized;
        movementHandler.Move(directionToPlayer);

        // Rotate to face the player
        movementHandler.RotateTowards(player.position);
    }
}
```

### 6. **Enemy Weapon AI Script (`EnemyWeaponAI.cs`)**
This script will automatically shoot at the player at regular intervals using the `WeaponHandler`.

```csharp
using UnityEngine;

public class EnemyWeaponAI : MonoBehaviour
{
    public Transform player;  // The player to shoot towards

    private WeaponHandler weaponHandler;

    void Start()
    {
        // Get the WeaponHandler component attached to the enemy
        weaponHandler = GetComponent<WeaponHandler>();
        
        // Find the player if not manually set
        if (player == null)
        {
            player = GameObject.FindGameObjectWithTag("Player").transform;
        }
    }

    void Update()
    {
        if (player == null) return;

        // Shoot at the player (fire automatically)
        weaponHandler.Shoot();
    }
}
```

### Unity Setup:
1. **Player GameObject**:
   - Attach the following scripts: `MovementHandler`, `PlayerMovement`, `WeaponHandler`, `PlayerWeapon`.
   - Assign the `projectilePrefab` and `firePoint` in the `WeaponHandler` in the Unity Inspector.

2. **Enemy GameObject**:
   - Attach the following scripts: `MovementHandler`, `EnemyMovementAI`, `WeaponHandler`, `EnemyWeaponAI`.
   - Assign the `projectilePrefab` and `firePoint` in the `WeaponHandler` in the Unity Inspector.
   - Set the `player` reference in the `EnemyMovementAI` and `EnemyWeaponAI` scripts, or tag your player GameObject as `"Player"` so it automatically finds it.

### Summary:
- **`MovementHandler`** and **`WeaponHandler`** handle the actual movement and shooting logic.
- **Player scripts** handle user input to control the player's movement and shooting.
- **Enemy AI scripts** automatically move towards the player and shoot at them.