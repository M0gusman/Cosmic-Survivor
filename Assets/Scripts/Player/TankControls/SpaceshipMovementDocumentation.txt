To create a top-down spaceship movement system using `Rigidbody2D.AddForce` for a floaty space-like feel, you'll be leveraging Unity's physics system to simulate inertia and smooth acceleration/deceleration. Here's how you can achieve that.

### 1. Setting Up the Scene:
Ensure your spaceship has a `Rigidbody2D` component attached to it and that its `gravityScale` is set to 0 (since we don't want gravity affecting movement in space). Also, make sure to freeze the `z` rotation if you don't want it to spin uncontrollably.

### 2. The Movement Script:
This script will handle forward movement, backward movement, and rotation for your spaceship. By using `AddForce`, you'll get that desired "floaty" effect where the spaceship accelerates and drifts.

```csharp
using UnityEngine;

public class SpaceshipMovement : MonoBehaviour
{
    public float thrustForce = 10f; // The force applied when moving forward/backward
    public float rotationSpeed = 100f; // The speed at which the spaceship rotates
    public float drag = 0.5f; // Drag to reduce velocity over time and avoid constant drift

    private Rigidbody2D rb;

    void Start()
    {
        // Get the Rigidbody2D component
        rb = GetComponent<Rigidbody2D>();

        // Set drag so it doesn't drift forever
        rb.drag = drag;
    }

    void Update()
    {
        HandleRotation();
        HandleMovement();
    }

    // Handle spaceship rotation
    void HandleRotation()
    {
        // Input for rotation (A/D or Left Arrow/Right Arrow)
        float rotationInput = -Input.GetAxis("Horizontal");

        // Apply rotation
        transform.Rotate(0, 0, rotationInput * rotationSpeed * Time.deltaTime);
    }

    // Handle forward and backward thrust movement
    void HandleMovement()
    {
        // Input for thrust (W/S or Up Arrow/Down Arrow)
        float thrustInput = Input.GetAxis("Vertical");

        // Apply force in the direction the spaceship is facing
        rb.AddForce(transform.up * thrustInput * thrustForce);
    }
}
```

### Explanation of the Code:
1. **Rigidbody2D Setup:**
   - The spaceship uses `Rigidbody2D` for physics-based movement. Drag is set on the `Rigidbody2D` to ensure that the ship doesn't drift indefinitely after releasing controls.

2. **Thrusting (Forward/Backward Movement):**
   - The `HandleMovement` method checks for vertical input (`W/S` or `Up/Down Arrow`) and applies a force in the direction the spaceship is facing (`transform.up`).

3. **Rotation:**
   - The `HandleRotation` method rotates the spaceship around the z-axis based on horizontal input (`A/D` or `Left/Right Arrow`). Note that we're using `transform.Rotate` instead of applying a torque to keep rotation simple and responsive.

4. **Floaty Effect:**
   - By using `AddForce`, we simulate the inertia in space. The spaceship doesn't stop immediately when you release the controls but gradually slows down due to the drag value applied to the `Rigidbody2D`.

### 3. Enhancements:
You can tweak the `thrustForce`, `rotationSpeed`, and `drag` values to fine-tune how responsive or floaty the movement feels.

### Bonus â€“ Limiting Maximum Speed:
If you feel that the spaceship can reach too high speeds, you can cap its velocity.

Add this to your `Update` or `FixedUpdate` method:

```csharp
void FixedUpdate()
{
    // Limit the spaceship's velocity
    float maxSpeed = 5f; // Adjust this value to control max speed
    if (rb.velocity.magnitude > maxSpeed)
    {
        rb.velocity = rb.velocity.normalized * maxSpeed;
    }
}
```

### Conclusion:
This basic movement system will give you a solid "floaty" space feel for your top-down spaceship shooter game using `Rigidbody2D.AddForce`. Let me know if you'd like further refinements or if you want to add more mechanics like shooting or advanced physics!