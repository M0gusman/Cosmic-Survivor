ITERATION 1
To create a top-down movement system with a "floaty" space feel for your spaceship shooter using `AddForce`, we'll implement a system where the player can move in four or eight directions (depending on your preference). Using `AddForce` gives the spaceship the desired inertia and drag needed for a space environment.

### Steps:
1. Use `Rigidbody2D` for physics-based movement.
2. Apply forces in the desired direction based on user input.
3. Adjust drag for a slow stop, mimicking frictionless space.

### Full Example (4/8 Axis Movement):

```csharp
using UnityEngine;

public class SpaceshipMovement : MonoBehaviour
{
    // Movement variables
    public float thrustForce = 10f;  // Controls the force applied when moving
    public float maxSpeed = 5f;      // Maximum speed for the spaceship
    public float drag = 0.9f;        // Controls how fast the ship slows down (affects inertia)

    private Rigidbody2D rb;

    void Start()
    {
        // Get the Rigidbody2D component
        rb = GetComponent<Rigidbody2D>();
        
        // Optionally set linear drag if needed
        rb.drag = drag; // You can tweak this for a better floaty effect
    }

    void Update()
    {
        // Get the input for movement
        Vector2 movementInput = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical")).normalized;

        // Apply force based on input direction
        if (movementInput != Vector2.zero)
        {
            // Add force in the direction of the input
            rb.AddForce(movementInput * thrustForce);

            // Limit the velocity to the maximum speed to avoid too fast movement
            if (rb.velocity.magnitude > maxSpeed)
            {
                rb.velocity = rb.velocity.normalized * maxSpeed;
            }
        }
    }
}
```

### Key Points:
1. **Thrust Force (`thrustForce`)**: This is the amount of force applied to the spaceship when moving. You can increase or decrease it to make the ship feel more or less responsive.
2. **Maximum Speed (`maxSpeed`)**: This limits how fast your ship can move. This prevents the ship from accelerating indefinitely.
3. **Drag**: This value is used to simulate the ship gradually slowing down when no input is provided, adding to the "floaty" space feel.
4. **AddForce**: We're applying force in the direction of input, making the movement feel smooth and continuous.

### Explanation:

- `Input.GetAxisRaw("Horizontal")` and `Input.GetAxisRaw("Vertical")` are used to capture player input. The axis values are either `-1`, `0`, or `1`, and `normalized` ensures the ship moves at the same speed regardless of diagonal input (for 8-axis movement).
- `rb.AddForce(movementInput * thrustForce)` adds force based on the player's input, simulating acceleration.
- `rb.velocity.magnitude > maxSpeed` ensures that the spaceship's speed is capped so it doesn't move too fast.

### Optional: 8-Axis Movement Tweaks
The current code already supports 8-axis movement by using both horizontal and vertical input (`WASD` or arrow keys). You can fine-tune this by adjusting `thrustForce` or `drag` for the feel you want.

### Fine-Tuning:

1. **Drag**: A value of `0.9f` for drag makes the ship slow down gently after movement stops. If you want a stronger space effect, you can reduce this (e.g., `0.1f` or `0` for no drag).
   
2. **Thrust Force**: Adjust the `thrustForce` to control how quickly the ship starts moving when a key is pressed. A smaller value will give the ship a slower, more gradual acceleration.

This setup will give your spaceship a smooth, "floaty" feel while maintaining control.


ITERATION 2
To make your spaceship follow the mouse cursor in a top-down 2D shooter, you'll need to implement a system where the spaceship rotates to face the mouse. This is achieved by calculating the direction from the spaceship to the cursor and applying a rotation to the spaceship's `Rigidbody2D`.

Hereâ€™s how you can modify the code to make the spaceship point towards the cursor:

### Updated Script (Spaceship Movement + Point to Cursor)

```csharp
using UnityEngine;

public class SpaceshipMovement : MonoBehaviour
{
    // Movement variables
    public float thrustForce = 10f;  // Controls the force applied when moving
    public float maxSpeed = 5f;      // Maximum speed for the spaceship
    public float drag = 0.9f;        // Controls how fast the ship slows down (affects inertia)

    private Rigidbody2D rb;
    private Camera mainCamera;

    void Start()
    {
        // Get the Rigidbody2D component
        rb = GetComponent<Rigidbody2D>();
        
        // Set the camera (required to convert screen point to world point)
        mainCamera = Camera.main;

        // Optionally set linear drag if needed
        rb.drag = drag; // Tweak this for a better floaty effect
    }

    void Update()
    {
        // Get the input for movement
        Vector2 movementInput = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical")).normalized;

        // Apply force based on input direction
        if (movementInput != Vector2.zero)
        {
            // Add force in the direction of the input
            rb.AddForce(movementInput * thrustForce);

            // Limit the velocity to the maximum speed to avoid too fast movement
            if (rb.velocity.magnitude > maxSpeed)
            {
                rb.velocity = rb.velocity.normalized * maxSpeed;
            }
        }

        // Rotate spaceship to face the cursor
        RotateTowardsMouse();
    }

    void RotateTowardsMouse()
    {
        // Get mouse position in world space
        Vector3 mousePosition = mainCamera.ScreenToWorldPoint(Input.mousePosition);

        // Calculate the direction to the mouse
        Vector2 direction = (mousePosition - transform.position).normalized;

        // Calculate the angle in degrees
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;

        // Apply the rotation to the spaceship
        rb.rotation = angle;
    }
}
```

### Breakdown of the Rotation Logic:
1. **`mainCamera.ScreenToWorldPoint(Input.mousePosition)`**: This converts the mouse position from screen space (pixel coordinates) to world space (the actual position in the game world).
   
2. **`direction = (mousePosition - transform.position).normalized`**: We calculate the direction vector from the spaceship to the mouse. Normalizing it makes sure the vector only represents the direction and not the distance.

3. **`Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg`**: `Atan2` computes the angle in radians between the positive x-axis and the point `(x, y)`. We multiply by `Mathf.Rad2Deg` to convert it from radians to degrees.

4. **`rb.rotation = angle`**: The Rigidbody2D's rotation is updated to match the angle calculated above, making the spaceship point towards the cursor.

### Usage:
- The spaceship will **move** based on your arrow keys or `WASD` inputs.
- It will **rotate** to point towards the mouse cursor, allowing you to aim and move independently.

### Tweaks:
- You can adjust `thrustForce`, `maxSpeed`, and `drag` to tweak the movement and responsiveness.
- For additional smoothness, you can introduce smoothing when applying the rotation using `Quaternion.Lerp` or `Mathf.SmoothDampAngle`, but for now, it will instantly rotate to face the cursor.


ITERATION 3
To make sure the **top** of the spaceship (e.g., its forward direction) always follows the mouse cursor, we need to adjust the angle calculation. In Unity's 2D coordinate system, the top of the object corresponds to the positive **up** direction (i.e., the local `y-axis`).

In the previous solution, we rotated the spaceship so that its **right side** (x-axis) followed the mouse. Now, we just need to add 90 degrees to the computed angle, so that the top of the spaceship aligns with the mouse cursor.

Here's the updated script where the **top** of the spaceship follows the mouse:

### Updated Script (Top of Spaceship Faces Cursor)

```csharp
using UnityEngine;

public class SpaceshipMovement : MonoBehaviour
{
    // Movement variables
    public float thrustForce = 10f;  // Controls the force applied when moving
    public float maxSpeed = 5f;      // Maximum speed for the spaceship
    public float drag = 0.9f;        // Controls how fast the ship slows down (affects inertia)

    private Rigidbody2D rb;
    private Camera mainCamera;

    void Start()
    {
        // Get the Rigidbody2D component
        rb = GetComponent<Rigidbody2D>();
        
        // Set the camera (required to convert screen point to world point)
        mainCamera = Camera.main;

        // Optionally set linear drag if needed
        rb.drag = drag; // Tweak this for a better floaty effect
    }

    void Update()
    {
        // Get the input for movement
        Vector2 movementInput = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical")).normalized;

        // Apply force based on input direction
        if (movementInput != Vector2.zero)
        {
            // Add force in the direction of the input
            rb.AddForce(movementInput * thrustForce);

            // Limit the velocity to the maximum speed to avoid too fast movement
            if (rb.velocity.magnitude > maxSpeed)
            {
                rb.velocity = rb.velocity.normalized * maxSpeed;
            }
        }

        // Rotate spaceship to face the cursor
        RotateTowardsMouse();
    }

    void RotateTowardsMouse()
    {
        // Get mouse position in world space
        Vector3 mousePosition = mainCamera.ScreenToWorldPoint(Input.mousePosition);

        // Calculate the direction to the mouse
        Vector2 direction = (mousePosition - transform.position).normalized;

        // Calculate the angle in degrees (top of object is the y-axis, so add 90 degrees)
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg - 90f;

        // Apply the rotation to the spaceship
        rb.rotation = angle;
    }
}
```

### Key Change:
- **`float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg - 90f;`**: The **90-degree adjustment** ensures the top of the spaceship (which is the local `up` or `y-axis`) follows the mouse cursor instead of the right side. This works because Unity's default forward direction for a 2D object is the positive y-axis.

### Explanation:
1. The `Mathf.Atan2(direction.y, direction.x)` part calculates the angle between the mouse and the spaceship, but this angle aligns the right side of the object with the cursor.
2. By subtracting **90 degrees**, we rotate the spaceship so that its top (`+Y` local axis) points toward the cursor instead of the right side.

### Final Result:
- Now, the **top of the spaceship** will always point towards the mouse cursor while the movement remains controlled by the player's input (`WASD` or arrow keys).
- This is perfect for a spaceship shooter where the player aims with the mouse while navigating in a 2D space.