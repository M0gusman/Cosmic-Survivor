To create an enemy AI that reuses the same movement and shooting mechanics as the player, you'll need to make a few adjustments:

- **Movement:** Instead of using input keys like the player does, the enemy will move towards the player automatically by calculating a direction vector.
- **Shooting:** The enemy will shoot projectiles at the player when in range, mimicking the player's shooting behavior.

### Steps:
1. **Reusing Player Code:** We'll reuse the movement and shooting code from the player's script.
2. **Enemy AI Behavior:**
   - The enemy will move towards the player using `AddForce` for a similar floaty feel.
   - It will rotate to face the player.
   - The enemy will shoot at the player at regular intervals or when within a certain range.

### Enemy AI Script

```csharp
using UnityEngine;

public class EnemyAI : MonoBehaviour
{
    // Reference to the player (to target)
    public Transform player;

    // Movement variables
    public float thrustForce = 5f;   // Adjusted for enemy
    public float maxSpeed = 3f;      // Adjusted for enemy
    public float drag = 0.9f;        // Same floaty effect as player

    // Shooting variables
    public GameObject projectilePrefab; // Prefab for the projectile
    public Transform firePoint;         // The point from where the projectile will be fired
    public float projectileSpeed = 8f;  // Speed of the projectile
    public float shootingInterval = 2f; // Time between shots

    private Rigidbody2D rb;
    private Camera mainCamera;
    private float timeSinceLastShot = 0f;

    void Start()
    {
        // Get the Rigidbody2D component
        rb = GetComponent<Rigidbody2D>();
        
        // Optionally set linear drag if needed
        rb.drag = drag; // Same floaty effect

        // Optionally, you can find the player automatically if it's tagged as "Player"
        if (player == null)
        {
            GameObject playerObj = GameObject.FindGameObjectWithTag("Player");
            if (playerObj != null)
            {
                player = playerObj.transform;
            }
        }
    }

    void Update()
    {
        if (player == null) return;

        // Move towards the player
        MoveTowardsPlayer();

        // Rotate to face the player
        RotateTowardsPlayer();

        // Shoot at the player at regular intervals
        timeSinceLastShot += Time.deltaTime;
        if (timeSinceLastShot >= shootingInterval)
        {
            ShootProjectile();
            timeSinceLastShot = 0f;
        }
    }

    void MoveTowardsPlayer()
    {
        // Calculate direction to the player
        Vector2 direction = (player.position - transform.position).normalized;

        // Apply force to move towards the player
        rb.AddForce(direction * thrustForce);

        // Limit the velocity to the maximum speed to avoid too fast movement
        if (rb.velocity.magnitude > maxSpeed)
        {
            rb.velocity = rb.velocity.normalized * maxSpeed;
        }
    }

    void RotateTowardsPlayer()
    {
        // Calculate the direction to the player
        Vector2 direction = (player.position - transform.position).normalized;

        // Calculate the angle in degrees (top of object is the y-axis, so add 90 degrees)
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg - 90f;

        // Apply the rotation to the enemy
        rb.rotation = angle;
    }

    void ShootProjectile()
    {
        if (projectilePrefab != null && firePoint != null)
        {
            // Instantiate the projectile at the fire point
            GameObject projectile = Instantiate(projectilePrefab, firePoint.position, firePoint.rotation);

            // Get the Rigidbody2D component of the projectile
            Rigidbody2D projectileRb = projectile.GetComponent<Rigidbody2D>();

            // Set the velocity of the projectile in the direction the firePoint is facing
            projectileRb.velocity = firePoint.up * projectileSpeed;  // Use 'up' as the firePoint's forward direction
        }
        else
        {
            Debug.LogWarning("Projectile Prefab or Fire Point not set!");
        }
    }
}
```

### Key Elements of the AI:
1. **Targeting the Player**: The enemy uses the player's position (`player.position`) to calculate movement and aim.
   
2. **Movement Towards the Player (`MoveTowardsPlayer`)**:
   - The direction to the player is calculated using `(player.position - transform.position).normalized`.
   - The enemy applies a force towards the player using `AddForce`, similar to how the player moves, but with different values for `thrustForce` and `maxSpeed` to create more balanced gameplay.

3. **Rotation Towards the Player (`RotateTowardsPlayer`)**:
   - The enemy rotates its top to face the player using `Mathf.Atan2`, just like the player rotates to face the mouse.

4. **Shooting at Regular Intervals**:
   - The enemy shoots projectiles at the player every `shootingInterval` seconds.
   - The `timeSinceLastShot` variable tracks the time since the last shot and resets after shooting.

### Setup in Unity:
1. **Enemy Prefab**:
   - Add this script to the enemy GameObject.
   - Make sure the enemy has a `Rigidbody2D` component with the same settings (e.g., gravity scale = 0).
   - Ensure the enemy has a fire point (`firePoint`) and projectile prefab (`projectilePrefab`) set in the Inspector.

2. **Player Reference**:
   - Either drag the player GameObject into the `player` field in the Inspector, or make sure your player is tagged as "Player" so the script automatically finds the player at runtime.

3. **Projectile Prefab**:
   - Reuse the same projectile prefab and fire point setup as for the player to ensure both shoot in the same manner.

### Fine-Tuning:
- **Aggressiveness**: Adjust the `thrustForce` and `maxSpeed` to make the enemy more or less aggressive.
- **Shooting Frequency**: You can adjust `shootingInterval` to make the enemy shoot faster or slower.
- **Projectile Speed**: Adjust the `projectileSpeed` to control how fast the projectiles move.

### Summary:
This AI uses the same mechanics as the player, but instead of manual input, the enemy AI automatically moves towards the player, rotates to face them, and shoots at regular intervals. You can easily expand this system by adding behavior conditions, such as shooting only when within a certain range or adding dodge maneuvers.